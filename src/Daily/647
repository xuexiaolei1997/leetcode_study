class Solution {
    // Manacher算法
    public int countSubstrings(String s) {
        if(s==null||s.length()==0) return 0;

        int count = 0;

        // **************************************************************
        // 添加 # ，返回至res数组中，保证奇数，左右对称
        char[] charArr = s.toCharArray();
        char[] res = new char[s.length()*2+1];
        int index = 0;
        for(int i=0;i<res.length;i++) res[i] = (i&1)==0?'#':charArr[index++];

        // 声明存放最大回文半径的数组
        int[] cArr = new int[res.length];
        int C = -1; // 中心位置
        int R = -1; // 当前中心位置的右侧回文半径
        int max = Integer.MIN_VALUE;

        for(int i = 0; i < res.length; i++){
            /**
             * 一、当前位置在右半径内，以C为中心，i的对称点记为i'，i' = 2 * C - i
             * 1 -> i'的左边界如果在C的左边界右侧，则取i'与i的回文半径相同，即R = C - i'
             * 2 -> i'的左边界如果在C的左边界左侧，则取R - i
             * 3 -> i'的左边界与C的左边界重合，则继续外扩R
             * 注：1，2是确定的，不需要外扩，因为在确定当前R的时候，已经对R之外的进行了判定，不是回文。
             *     使用min函数，是将12条件都考虑进去，12条件下，最大边界是从i到R，最小则根据左边界判断，因此直接取，
             *     两者条件互斥，取最小的那个即可
             *
             * 二、当前位置不在右半径内，取1再外扩
             */
            cArr[i] = R > i ? Math.min(cArr[2 * C - i], R - i + 1) : 1;

            // 左右扩散，寻找最大回文半径
            while(i + cArr[i] < res.length && i - cArr[i] > -1){
                if(res[i+cArr[i]] == res[i-cArr[i]]){
                    cArr[i]++;
                }else{
                    break;
                }
            }

            // 更新RC
            if(i + cArr[i] > R){
                R = i + cArr[i] - 1;
                C = i;
            }

            count += cArr[i] / 2;
        }
        // **************************************************************
        return count;
    }
}
